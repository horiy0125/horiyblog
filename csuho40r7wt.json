{"id":"csuho40r7wt","createdAt":"2021-04-10T06:22:55.125Z","updatedAt":"2021-05-02T15:51:31.702Z","publishedAt":"2021-04-21T20:26:30.314Z","revisedAt":"2021-05-02T15:51:31.702Z","title":"ReactからNuxt.jsに乗り換えてポートフォリオサイト+ブログを開発したらめちゃくちゃ快適だった件","thumbnail":{"url":"https://images.microcms-assets.io/assets/da85014d1c1e441f9602d537a0361842/d7aeaa3b6e384052b28979111c17cce4/nuxt-code_tiny.png","height":872,"width":1660},"body":"<h1 id=\"h8d027c8ed3\">はじめに</h1><p>Webフロントエンドに手を出し始めたころからずっと、自分のポートフォリオサイトを作りたい！と思ってドメインまで取得していたのですが、なかなか時間がなく作れずにいました。しかし、現在長期インターンしているnoteのフロントエンドがNuxt.jsであったことがきっかけとなり、これまでReact系のフレームワークでしか開発してこなかったので勉強もかねて開発をはじめよう！と思い立ちました。</p><h1 id=\"h0f3fa95800\">このサイトの技術面</h1><h2 id=\"h03726fb0df\">技術スタック</h2><p>まずはこのポートフォリオサイト（+ブログ）の技術面について紹介していきます。</p><ul><li>言語: TypeScript</li><li>フレームワーク: Nuxt.js</li><li>UIライブラリ: Vuetify.js</li><li>ホスティング: Vercel(SSG)</li><li>CMS: microCMS</li><li>シンタックスハイライト: highlight.js</li></ul><p>基本的に全ページSSG(Static Site Generation)で統一しており、Vercelでのビルド時にのみAPIへのデータフェッチが走り、静的なHTMLが生成されるようになっています。APIとはmicroCMSのことで、TOPページのお知らせやブログ記事の管理に使用しています。</p><h2 id=\"h0f12ce8a89\">リポジトリ環境</h2><h3 id=\"hf43cd0b9ed\">linter類</h3><ul><li>ESLint</li><li>Prettier</li><li>husky(lint-staged)</li><li>StyleLint</li><li>CommitLint</li></ul><p>詳しくは後述しますが、これらは<code>create-nuxt-app</code>で一括導入しました。</p><h3 id=\"hb704ab42a8\">SCSS</h3><ul><li><code>sass-loader</code> (^10.1.1)</li><li><code>node-sass</code></li><li><code>@nuxtjs/style-resources</code></li></ul><p>あたりをインストール後、<code>@/assets/styles</code>内にGlobalなSCSSを書きました。これにより、各コンポーネントから<strong>import不要</strong>で<code>mixins</code>, <code>variables</code>を使えます。Reactを書いていたころはそもそもCSSしか書いていなかったのですが、Global SCSSの便利さには驚愕しました。もう元には戻れません。<br>さらに、各コンポーネントで</p><pre><code>&lt;template&gt;\n  &lt;div class=\"o-hogeComponent\"&gt;\n    &lt;p class=\"o-hogeComponent__paragraph\"&gt;hoge&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre><p>上のような<code>template</code>を書いたうえで</p><pre><code>&lt;style lang=\"scss\" scoped&gt;\n$block: \".o-hogeComponent\";\n#{$block} {\n  display: inline-block;\n  width: 100%;\n  &amp;__paragraph {\n    font-size: 16px;\n  }\n}\n&lt;/style&gt;</code></pre><p>このように<code>&amp;__</code>で<code>class</code>を書き分けることでSCSSのスコープと実際にスタイルを当てるタグを対応させることができます。<br>この書き方をすると、条件に応じてスタイルを変えたい（<code>active</code>なタブ、非同期処理実行中のボタン…など）場合に<code>string</code>なクラス名を変化させてあげるだけで容易にスタイルを動的に変化させることができる（しかもピュアなSCSS！）のがとてもうれしいです。<br>ちなみに、クラス名についている<code>o-</code>はAtomic Designでの粒度を指しています。</p><blockquote>p- =&gt; pages<br>t- =&gt; templates<br>o- =&gt; organisms<br>m- =&gt; molecules<br>a- =&gt; atoms</blockquote><h3 id=\"h9ff89bd48f\">ディレクトリ構成</h3><p>基本的にNuxt本来のディレクトリ構成を崩さないようにしています。</p><ul><li>assets　Global SCSSとアイコン画像（<code>@/assets/images</code>に配置した画像は<code>webpack</code>のモジュールとして扱われる）</li><li>components　各種コンポーネントをAtomic Design式のディレクトリ構造で格納</li><li>config　APIやドメインなど環境変数周りを格納</li><li>constants　様々な定数を格納（Vuetifyの<code>snackbar</code> typesとか）</li><li>contents　CMSで管理はしていないけど<code>v-for</code>で吐き出したいコンテンツを格納</li><li>pages　その名の通り各ページの<code>.vue</code>ファイルを格納</li><li>static　画像や<code>favicon</code>などの静的ファイルを格納</li><li>types　TypeScriptなので型定義をここに格納</li><li>utils　Date型データを<code>toLocaleDateString()</code>するものなどちょっとした関数を格納</li><li>view-models　APIからフェッチしてきたデータを必要なものだけに成形するための関数と型定義を格納</li></ul><p>本当は<code>api-clients</code>なんかも切り出したかったのですが、状態管理を入れておらず、<code>pages</code>上の<code>asyncData()</code>でしかAPIを叩かないので今回はしていません。</p><h1 id=\"hd92ad419bf\">Nuxt.jsを使ってみて</h1><h2 id=\"h122191327b\"><code>create-nuxt-app</code>がすごい！！</h2><p>プロジェクト作成時に叩くこちらのコマンドですが、他のどのフレームワークよりもすごいです。<br>なぜなら、<br><img src=\"https://images.microcms-assets.io/assets/da85014d1c1e441f9602d537a0361842/02064343d6834901930feed8b6308999/create-nuxt-app.jpg?w=1088&amp;h=367\" alt=\"create-nuxt-app コンソール画面\"><br>各種ライブラリ・linter類を一括導入できます。<br>自力で全部導入してテンプレート的なリポジトリを作ってしまうのもかなり勉強になりますが、コマンド一発で導入できるとサクッと何かを作りたいときにめちゃくちゃ良いです。</p><h2 id=\"h640edd6a91\">SCSS環境がすごい！！</h2><p>これは一見NuxtというよりSCSSがすごいのでは？となりますが、ちゃんとNuxtがすごいです。<br>現在WebフロントエンドといえばNext.js一強感がありますが、NextはCSS Modulesがビルトインされているため、<strong><code>pages</code></strong><strong>以外でのCSS/SCSSファイルのimportができません。</strong>やろうと思えば<code>variables</code>, <code>mixins</code>をCSS Modulesで使うこともできますが、その都度importが必要になってしまいます。またCSS in JSの<code>styled-components</code>を入れるとなるとちょっと荒業を使ってやらないといけないみたいで、ビルトインのCSS Modules以外を導入しにくいという状況になっています。GlobalなSCSS・import不要な<code>variables</code>, <code>mixins</code>を快適に実現できるフレームワーク（かつモダンで実用可能なもの）は今のところNuxtのみじゃないかなと思っています。</p><h1 id=\"ha214098e44\">まとめ</h1><p>今回はリポジトリ環境やSCSSの話などかなりDX(Developer Experience)を意識した内容になりました。最後にちょこっとだけNuxtで不満を抱えている点を挙げるとすると、全てがJavaScriptオブジェクトであるReactに対してVueはそうではない点や、Vueで定義したメソッドなどを再利用しにくい点がありますが、React・Vueそれぞれにメリットとデメリットがありますし、Vue 3 Composition APIが出たことによる改善も期待できるので、開発するものに応じて適切な選択ができればいいかなと思います。僕は結構Nuxt好きなので、当分は浸りたいと思います。お読みいただきありがとうございました！</p><h1 id=\"h3bcda3e6b0\">最後に</h1><p>このサイトの全ソースコードは<a href=\"https://github.com/horri1520/portfolio-site-v2\" target=\"_blank\" rel=\"noopener noreferrer\">GitHubのリポジトリ</a>で公開しているので、ぜひ覗いてみてください。プルリク大歓迎です！</p>","category":{"id":"gydmxxcjsav1","createdAt":"2021-04-03T08:28:19.872Z","updatedAt":"2021-04-03T08:28:19.872Z","publishedAt":"2021-04-03T08:28:19.872Z","revisedAt":"2021-04-03T08:28:19.872Z","name":"Webフロントエンド"}}